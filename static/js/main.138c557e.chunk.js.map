{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","text","target","value","submitUrl","preventDefault","handleClick","bind","assertThisInitialized","react_default","a","createElement","className","onSubmit","autoFocus","type","placeholder","url","onChange","Component","App","changeUrl","setState","prevState","fetchImage","state","imgUrl","exec","newmq","newhq","newmaxres","mq","hq","maxres","_unused","alert","maxRes","Fragment","href","src_Form","rel","alt","src","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.138c557e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.scss';\r\n\r\nclass Form extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.submitUrl=this.submitUrl.bind(this);\r\n    this.handleChange=this.handleChange.bind(this);\r\n  }\r\n  handleChange=(e)=>{\r\n      let text=e.target.value;\r\n      this.props.handleChange(text);\r\n  }\r\n\r\n  submitUrl=(e)=>{\r\n    e.preventDefault();\r\n    this.props.handleClick();\r\n    //console.log(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <form onSubmit={this.submitUrl} className=\"Form\">\r\n          <input\r\n            autoFocus\r\n            className=\"Input\"\r\n            type=\"text\"placeholder=\"PASTE LINK HERE\"\r\n            value={this.props.url}\r\n            onChange={this.handleChange}\r\n            >\r\n          </input>\r\n          {/* &nbsp;\r\n          <button\r\n            className=\"Button\"\r\n            type=\"submit\"\r\n            onClick={this.submitUrl}\r\n          >\r\n            GET\r\n          </button> */}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\r\nimport './App.scss';\r\n\r\nimport Form from './Form.js';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      url:\"\",\r\n      imgUrl:\"\",\r\n      mq:\"\",\r\n      hq:\"\",\r\n      maxRes:\"\"\r\n    }\r\n    this.changeUrl=this.changeUrl.bind(this);\r\n    this.fetchImage=this.fetchImage.bind(this);\r\n  }\r\n\r\n  changeUrl=(text)=>{\r\n    //console.log(this.state.url);\r\n    this.setState((prevState)=>({\r\n      url:text\r\n    }));\r\n  }\r\n\r\n  fetchImage=()=>{\r\n    if(this.state.url){\r\n      try {\r\n        let aaa = /(.*)(com|be)\\/(watch\\?v=)?(.{11})[?|&]?.*/g;\r\n        let imgUrl = aaa.exec(this.state.url)[4];\r\n        //console.log(`${imgUrl}`);\r\n        //console.log(\"Fetching Image for \"+this.state.url);\r\n        let newmq=\"https://i.ytimg.com/vi/\"+imgUrl+\"/mqdefault.jpg\";\r\n        let newhq=\"https://i.ytimg.com/vi/\"+imgUrl+\"/hqdefault.jpg\";\r\n        let newmaxres=\"https://i.ytimg.com/vi/\"+imgUrl+\"/maxresdefault.jpg\";\r\n        //console.log(newImgUrl);\r\n        this.setState((prevState)=>({\r\n          mq: newmq,\r\n          hq: newhq,\r\n          maxres: newmaxres\r\n        }))\r\n      }\r\n     catch {\r\n       //console.log(`error`);\r\n       alert(`Link is not valid, please try with a different one.`)\r\n     }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          {\r\n            !this.state.hq?\r\n            <div className=\"appTitle\">\r\n            <a href=\"http://surajk95.github.io/\">\r\n              <div className=\"appName\">YTG</div>\r\n              <div className=\"appDescription\">YOUTUBE THUMBNAIL GRABBER</div>\r\n              </a>\r\n          </div>\r\n        :\r\n        <></>\r\n        }\r\n          <div>\r\n            <Form\r\n              url={this.state.url}\r\n              handleChange={this.changeUrl}\r\n              handleClick={this.fetchImage}\r\n             />\r\n          </div>\r\n        </header>\r\n         {this.state.hq?\r\n         <div>\r\n           Click on an image to download.\r\n           <div className=\"results-container\">\r\n            <div><span className=\"qualHeader\">Max-resolution</span><br/><a href={this.state.maxres} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <img className=\"img-container\" alt=\"maxres\" src={this.state.maxres}/></a>\r\n            </div>\r\n            <div><span className=\"qualHeader\">Hq-resolution</span><br/><a href={this.state.hq} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <img className=\"img-container\" alt=\"hq\" src={this.state.hq}/></a>\r\n            </div>\r\n           </div>\r\n          </div>\r\n          : <div></div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}